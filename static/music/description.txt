SMART SHUFFLE ALGORITHM
=======================

Every time you listen to a song, the algorithm records the current time and
whether you finished the song or skipped it. Then your listening history is
grouped into sessions. Suppose in the morning you listened to songs A, B and C
but skipped song D, and then in the afternoon you listened to songs D, E and F
but skipped songs A and B. There would be two sessions:

    Session #   Listened    Skipped
    1           A, B, C     D
    2           D, E, F     A, B

The algorithm doesn't have a notion about if you "like" a song or not. Instead,
it thinks about what songs "go well together." In this example, A, B and C go
well together, but D does not go well with either A, B or C. So if you started a
new session and you listened to song D, the algorithm would be less likely to
play A, B or C, but it would be more likely to play E or F. This allows us to
automatically play the correct music for whatever mood you're currently in. It's
based on the assumption that your mood doesn't change during a single session.

This is called session-based collaborative filtering, and it's the main part of
the algorithm. However, there are two more parts: exploration and freshness.

Exploration
-----------
The problem with collaborative filtering is that it doesn't work well until you
already have a lot of data. When you first start using the app, songs are simply
chosen at random. But after the algorithm learns about some of your songs, it
must make a choice: should it play a song that it already knows you'll like, or
should it randomly pick another song that you haven't listened to very much yet
(or at all)?

Currently, both choices are given equal time. Whenever the algorithm chooses
which song to play next, it partitions all the songs in your library into two
sets. The first set contains songs that you've listened to a lot; the second set
contains songs you haven't listened to very much. The alghorithm chooses the
best possible song from each set and then flips a coin to decide which one
should be played.

How does it know which song from the second set is the "best" if there isn't
much listening data? It chooses randomly for the most part, but it tries to make
an educated guess. If you've skipped songs from a certain artist, it will give
higher priority to songs from different artists. I have a lot of Beatles music
in my collection, but I rarely listen to it. When the algorithm plays a few
Beatles songs for me and I skip them, it'll instead explore the other artists I
have before it goes back to try a different Beatles song.

Freshness
---------
The algorithm also tries to avoid playing the same songs over and over again--it
tries to play songs that are "fresh." Before the algorithm plays a song, it'll
look at all the times it was played in the past and how long ago it was played
each time. The more times the song was played and the more recently it was
played, the less fresh it will be, so that song will have a smaller chance of
being chosen.

But the algorithm also realizes that some songs are OK to play a lot while other
songs should be played only once in a while. If you skipped a song and the last
time you heard it was yesterday, the algorithm will try to wait a longer period
of time before playing it again. If you instead listen to the song, the
algorithm will play the song again sooner.


FUTURE WORK
-----------
In it's current state, the algorithm performs well for my use. But there are
many ways it could be improved. I think exploration needs work the most. Instead
of choosing songs mostly at random, it would be better to find ways to improve
our guesses. Some services like last.fm offer song data that could be used to
figure out what songs in the user's library are similar to each other.

In addition, the 50/50 split between exploration and exploitation could be
adjusted. It would be better if the algorithm decided how often would be best to
explore new songs instead of always doing it 50% of the time.
